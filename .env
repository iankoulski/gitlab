#!/bin/bash

# Exit on error
set -e 

# Source helper functions
source .fun

if [ "${DEBUG}" == "True" ]; then
	echo ""
	echo "OPERATING_SYSTEM=${OPERATING_SYSTEM}"
	echo "HOST_IP=${HOST_IP}"
	echo ""
fi

# Configure Runtime
## GITLAB_RUNTIME docker(default), kubernetes
export GITLAB_RUNTIME=docker
## GITLAB_INGRESS portmap(default), nodeport, loadbalancer
export GITLAB_INGRESS=portmap

# Configure GitLab Instance TODO: Gitlab External URL when we use NodePort
export GITLAB_HOSTNAME=${HOST_IP}
export GITLAB_HTTPS_PORT=446
export GITLAB_HTTPS_NODEPORT=30446
export GITLAB_EXTERNAL_URL=https://${GITLAB_HOSTNAME}:${GITLAB_HTTPS_PORT}
export GITLAB_SSH_PORT=2222
export GITLAB_REGISTRY_HOSTNAME=${HOST_IP}
export GITLAB_REGISTRY_HTTPS_PORT=443
export GITLAB_REGISTRY_HTTPS_NODEPORT=30443
export GITLAB_REGISTRY_EXTERNAL_URL=https://${GITLAB_REGISTRY_HOSTNAME}
export GITLAB_PAGES_ENABLE=true
export GITLAB_PAGES_HOSTNAME=${HOST_IP}
export GITLAB_PAGES_HTTPS_PORT=449
export GITLAB_PAGES_HTTPS_NODEPORT=30449
export GITLAB_PAGES_EXTERNAL_URL=https://${GITLAB_PAGES_HOSTNAME}:${GITLAB_PAGES_HTTPS_PORT}
if [ "${GITLAB_RUNTIME}" == "kubernetes" ]; then
	if [ "${GITLAB_INGRESS}" == "nodeport" ]; then
		export GITLAB_EXTERNAL_URL=https://${GITLAB_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}
		export GITLAB_REGISTRY_EXTERNAL_URL=https://${GITLAB_REGISTRY_HOSTNAME}:${GITLAB_REGISTRY_HTTPS_NODEPORT}
		export GITLAB_PAGES_EXTERNAL_URL=https://${GITLAB_PAGES_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}
	fi
fi
export GITLAB_CONTAINER_NAME=gitlab
export GITLAB_PATH_CONFIG="$(pwd)/wd/gitlab/config"
export GITLAB_PATH_LOGS="$(pwd)/wd/gitlab/logs"
if [ "${OPERATING_SYSTEM}" = "MacOS" ]; then
	export GITLAB_PATH_DATA=gitlab-data
else
	export GITLAB_PATH_DATA="$(pwd)/wd/gitlab/data"
fi
export GITLAB_RUNNER_PATH_CONFIG="$(pwd)/wd/gitlab-runner/config"
export GITLAB_RUNNER_PATH_DATA="$(pwd)/wd/gitlab-runner/data"

# Optional nfs-based PV configuration
export NFS_SERVER=
export NFS_GITLAB_CONFIG_PATH=
export NFS_GITLAB_LOGS_PATH=
export NFS_GITLAB_DATA_PATH=
export NFS_GITLAB_RUNNER_CONFIG_PATH=
export NFS_GITLAB_RUNNER_DATA_PATH=

# Backup settings
# 604800 seconds = 7 days
export GITLAB_BACKUP_KEEP_TIME=604800
# Cron format in GITLAB_BACKUP_CRONTAB_LINE
# \minute[0-60] \hour[0-24] \day[1-31] \month[1-12] \weekday[0-7] <user> <command>
export GITLAB_BACKUP_CRONTAB_LINE='\* 2 \* \* \* root bash -c "touch /var/opt/gitlab/backups/lastbackupstamp && /opt/gitlab/bin/gitlab-backup create CRON=1 SKIP=registry STRATEGY=copy && cp -f /etc/gitlab/gitlab-secrets.json /var/opt/gitlab/backups/\\$(/yyyymmdd.sh)-gitlab-secrets.json && cp -f /etc/gitlab/gitlab.rb /var/opt/gitlab/backups/\$(/yyyymmdd.sh)-gitlab.rb"'

# GITLAB_OMNIBUS_CONFIG variable overrides settings in the GitLab configuration file gitlab.rb
export GITLAB_OMNIBUS_CONFIG="nginx['enable'] = true; nginx['client_max_body_size'] = '500m'; nginx['redirect_http_to_https'] = true; nginx['redirect_http_to_https_port'] = 80; external_url '${GITLAB_EXTERNAL_URL}'; nginx['listen_addresses'] = ['0.0.0.0']; nginx['listen_port'] = '${GITLAB_HTTPS_PORT}'; nginx['listen_https'] = true; nginx['ssl_certificate'] = '/etc/gitlab/ssl/ssl-gitlab.crt'; nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/ssl-gitlab.key'; registry_external_url '${GITLAB_REGISTRY_EXTERNAL_URL}'; registry_nginx['enable'] = true; registry_nginx['listen_port'] = ${GITLAB_REGISTRY_HTTPS_PORT}; registry_nginx['ssl_certificate'] = '/etc/gitlab/ssl/ssl-registry.crt'; registry_nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/ssl-registry.key'; gitlab_pages['enable'] = '${GITLAB_PAGES_ENABLE}'; gitlab_rails['pages_host'] = '${GITLAB_PAGES_HOSTNAME}'; pages_external_url '${GITLAB_PAGES_EXTERNAL_URL}';  gitlab_pages['external_http'] = '0.0.0.0:448'; gitlab_pages['inplace_chroot'] = 'true'; pages_nginx['enable'] = '${GITLAB_PAGES_ENABLE}'; pages_nginx['listen_port'] = ${GITLAB_PAGES_HTTPS_PORT}; pages_nginx['ssl_certificate'] = '/etc/gitlab/ssl/ssl-pages.crt'; pages_nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/ssl-pages.key'; gitlab_pages['access_control'] = 'true'; gitlab_rails['backup_keep_time'] = ${GITLAB_BACKUP_KEEP_TIME};"

# Generate SSL Certificates if needed
if [ ! -d "${GITLAB_PATH_CONFIG}/ssl" ]; then
	mkdir -p "${GITLAB_PATH_CONFIG}/ssl"
fi
if [ ! -f "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.crt" ]; then
	./util/ssl-cert-generate.sh ${GITLAB_HOSTNAME}
	mv ssl.crt "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.crt"
	mv ssl.key "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.key"
	chmod 400 "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.key"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_HOSTNAME}"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}:${GITLAB_REGISTRY_HTTPS_NODEPORT}"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.crt" "/etc/docker/certs.d/${GITLAB_HOSTNAME}/ssl-gitlab.crt"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.crt" "/etc/docker/certs.d/${GITLAB_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}/ssl-gitlab.crt"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-gitlab.crt" "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}:${GITLAB_REGISTRY_HTTPS_NODEPORT}/ssl-gitlab.crt"
fi
if [ ! -f "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.crt" ]; then
	./util/ssl-cert-generate.sh ${GITLAB_REGISTARY_HOSTNAME}
	mv ssl.crt "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.crt"
	mv ssl.key "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.key"
	chmod 400 "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.key"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}:${GITLAB_REGISTRY_HTTPS_NODEPORT}"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.crt" "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}/ssl-registry.crt"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.crt" "/etc/docker/certs.d/${GITLAB_REGISTRY_HOSTNAME}:${GITLAB_REGISTRY_HTTPS_NODEPORT}/ssl-registry.crt"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-registry.crt" "/etc/docker/certs.d/${GITLAB_HOSTNAME}:${GITLAB_HTTPS_NODEPORT}/ssl-registry.crt"
fi
if [ ! -f "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.crt" ]; then
	./util/ssl-cert-generate.sh ${GITLAB_PAGES_HOSTNAME}
	mv ssl.crt "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.crt"
	mv ssl.key "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.key"
	chmod 400 "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.key"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_PAGES_HOSTNAME}"
	sudo mkdir -p "/etc/docker/certs.d/${GITLAB_PAGES_HOSTNAME}:${GITLAB_PAGES_HTTPS_NODEPORT}"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.crt" "/etc/docker/certs.d/${GITLAB_PAGES_HOSTNAME}/ssl-pages.crt"
	sudo cp -f "${GITLAB_PATH_CONFIG}/ssl/ssl-pages.crt" "/etc/docker/certs.d/${GITLAB_PAGES_HOSTNAME}:${GITLAB_PAGES_HTTPS_NODEPORT}/ssl-pages.crt"
fi

# Proxy settings [optional] - set if your network requires a proxy to connect to the Internet
export http_proxy=""
export https_proxy=""
export no_proxy=localhost

# Docker image settings
## REGISTRY: [optional] - Docker registry path including trailing "/". Example: registry.company.com/demo/
export REGISTRY=iankoulski/
if [ -n "${REGISTRY}" ]; then
  if [ "${REGISTRY: -1}" != "/" ]; then
    export REGISTRY="${REGISTRY}/"
  fi
fi
## IMAGE: <required> - Docker image name for this project. Example: myapp
export IMAGE=gitlab
## VERSION: [optional] - Version tag for this Docker image. Example: v20180302
#export VERSION=v$(date +%Y%m%d)
export VERSION=12.9.3-ee.0
export TAG=$(if [ -z "${VERSION}" ]; then echo ""; else echo ":${VERSION}"; fi) 
## BUILD_OPTS: [optional] - arguments for the docker image build command
export BUILD_OPTS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"

# Docker container runtime settings
## CONTAINER_NAME: [optional] - Name of the Docker container including the --name switch. Example --name myapp
export CONTAINER=${GITLAB_CONTAINER_NAME}
export CONTAINER_NAME="--name ${CONTAINER}"
## Port map [optional] - Mapping of external to internal ports including the -p switch. Example -p 80:8080 
export PORT_MAP="-p ${GITLAB_HTTPS_PORT}:${GITLAB_HTTPS_PORT} -p ${GITLAB_REGISTRY_HTTPS_PORT}:${GITLAB_REGISTRY_HTTPS_PORT} -p ${GITLAB_PAGES_HTTPS_PORT}:${GITLAB_PAGES_HTTPS_PORT} -p ${GITLAB_SSH_PORT}:22 -p 80:80"
## Volume map [optional] - Mapping of external to internal paths including the -v switch. Example $(pwd):/wd
export VOL_MAP="-v /var/run/docker.sock:/var/run/docker.sock -v '${GITLAB_PATH_CONFIG}':/etc/gitlab:Z -v '${GITLAB_PATH_LOGS}':/var/log/gitlab:Z -v '${GITLAB_PATH_DATA}':/var/opt/gitlab:Z -v '${GITLAB_RUNNER_PATH_CONFIG}':/etc/gitlab-runner:Z -v '${GITLAB_RUNNER_PATH_DATA}':/var/opt/gitlab-runner:Z"
## Network [optional] - Network name including the --net switch. Example --net mynet
export NETWORK=
## RUN_OPTS [optional] - additional options to specify with the run comman. Example -e POSTGRES_DB=dbname
export RUN_OPTS="-e http_proxy=$http_proxy -e https_proxy=$https_proxy -e no_proxy=$no_proxy -e GITLAB_BACKUP_CRONTAB_LINE='${GITLAB_BACKUP_CRONTAB_LINE}'"

